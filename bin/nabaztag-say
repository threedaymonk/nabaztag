#!/usr/bin/env ruby

require 'nabaztag'
require 'optparse'
load ENV['HOME'] + '/.nabaztag' rescue nil

OPTIONS = {
  :mac => NABAZTAG_MAC,
  :token => NABAZTAG_TOKEN,
  :voice => Nabaztag::VOICES[:en].first
}

ARGV.options do |o|
  script_name = File.basename($0)
  
  o.set_summary_indent('  ')
  o.banner =    "Usage: #{script_name} [OPTIONS] TEXT-TO-SAY"
  o.define_head "Tell Nabaztag to say something."
  o.separator   ""
  o.separator   "If you create a file in your home directory called .nabaztag"
  o.separator   "containing the MAC and API token for your device, like this:"
  o.separator   "  NABAZTAG_MAC = '00039XXXXXXX'"
  o.separator   "  NABAZTAG_TOKEN = '1234XXXXXXXXXXX'"
  o.separator   "then you need not specify the MAC and token on the command line."
  o.separator   ""
  o.separator   "Options:"
  
  begin  
    o.on(
      "-m", "--mac=MAC", String,
      "MAC address of device",
      "Default is NABAZTAG_MAC in ~/.nabaztag"
    ) { |OPTIONS[:mac]| }
    o.on(
      "-t", "--token=TOKEN", String,
      "API token",
      "Default is NABAZTAG_TOKEN in ~/.nabaztag"
    ) { |OPTIONS[:token]| }
    o.on(
      "-v", "--voice=VOICE", String,
      "Voice to use for speech",
      "Default is #{OPTIONS[:voice]}"
    ) { |OPTIONS[:voice]| }
    o.on(
      "-l", "--list-voices",
      "List available voices and exit"
    ) { 
      all = []
      Nabaztag::VOICES.each do |lang, voices|
        voices.each do |voice|
          all << "#{voice} (#{lang})"
        end
      end
      puts all.sort.join("\n")
      exit  
    }
    o.separator ""
    o.on_tail("-h", "--help", "Show this help message.") { puts o; exit }
    o.parse!

    OPTIONS.each do |k,v|
      if !v || v.empty?
        raise RuntimeError, "Missing parameter #{v}"
      end
    end  
    if ARGV.empty?
      raise RuntimeError, "Nothing to say"
    end
  rescue StandardError => e
    puts "Error: #{e.message}", ''
    puts o
    exit 1
  end
end

n = Nabaztag.new(OPTIONS[:mac], OPTIONS[:token])
n.voice = OPTIONS[:voice]
n.say!(ARGV.join(' '))
